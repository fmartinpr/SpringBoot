- Filtrar una colección List.
[List].stream().filter([objeto] -> [objeto].[campo_objeto_filtrar] == [valor_filtrar]).collect(Collectors.toList())

- Parsear Set a List. 
List<[tipo_objeto]> [objeto] = new ArrayList<tipo_objeto>([objeto_set]);

- Ordenar una colección.
Collections.sort(personsSorted, (o1, o2) -> o1.getName().compareTo(o2.getName()));

- Convertir una colección de objetos a otra colección de objetos.
1º Caso.
public List<SimpleGrantedAuthority> getAuthorities() {
  return SecurityContextHolder.getContext().getAuthentication().getAuthorities().stream().map(this :: convertSimpleGrantedAuthority).collect(Collectors.toList());
}

private SimpleGrantedAuthority convertSimpleGrantedAuthority(GrantedAuthority a){
   if(a == null) return null; 
   else return (SimpleGrantedAuthority)a;
}
..................................................................................................................................................................
lstHeroe.stream().map(this::convertToDto).collect(Collectors.toList());

private Heroe convertToEntity(HeroeDto heroeDto) {
   return modelMapper.map(heroeDto, Heroe.class);
}
2º Caso llamando a un método del objeto de la colección
List<String> collect = alpha.stream().map(String::toUpperCase).collect(Collectors.toList());
3º Caso 
List<String> collect = staff.stream().map(x -> x.getName()).collect(Collectors.toList());


